import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext
from datetime import datetime, timedelta
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "8488896816:AAEWHfMkV850nFfLNmbJbJxYI7gjvXc-Mk8"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
ADMIN_ID = 7352069187  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID –≤ Telegram

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
user_data = {}  # {user_id: {"tokens": int, "username": str}}
group_week_winner = None
week_start_date = datetime.now()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
keyboard = [['/get_tokens', '/my_stats'], ['/leaderboard', '/help']]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name
    
    if user_id not in user_data:
        user_data[user_id] = {"tokens": 0, "username": username}
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {username}! –Ø –±–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.\n\n"
        "–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π —Ç–æ–∫–µ–Ω—ã! –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –ø–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.",
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /get_tokens - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
async def show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks_text = """
üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:

1. üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤) - 1 —Ç–æ–∫–µ–Ω
2. üñº –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä—É—Ç–æ–µ —Ñ–æ—Ç–æ/–∫–∞—Ä—Ç–∏–Ω–∫—É - 1 —Ç–æ–∫–µ–Ω
3. üí¨ –ê–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ (3+ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ä—è–¥) - 2 —Ç–æ–∫–µ–Ω–∞
4. üë• –ü—Ä–∏–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–∞ –≤ –≥—Ä—É–ø–ø—É (–ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ) - 3 —Ç–æ–∫–µ–Ω–∞
5. ü§î –†–µ—à–∏—Ç—å –∑–∞–≥–∞–¥–∫—É –æ—Ç –±–æ—Ç–∞ - 2 —Ç–æ–∫–µ–Ω–∞

–ü—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª–∏—Ç —Ç–æ–∫–µ–Ω—ã!
    """
    await update.message.reply_text(tasks_text, reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /my_stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_data:
        stats = user_data[user_id]
        await update.message.reply_text(
            f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–¢–æ–∫–µ–Ω—ã: {stats['tokens']} ü™ô\n"
            f"–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {get_user_rank(user_id)}",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª —Ç–æ–∫–µ–Ω–æ–≤. –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è!", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /leaderboard - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
async def show_leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not user_data:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª —Ç–æ–∫–µ–Ω–æ–≤. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!", reply_markup=reply_markup)
        return
    
    sorted_users = sorted(user_data.items(), key=lambda x: x[1]["tokens"], reverse=True)[:10]
    
    leaderboard_text = "üèÜ –¢–û–ü-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
    for i, (user_id, data) in enumerate(sorted_users, 1):
        leaderboard_text += f"{i}. {data['username']} - {data['tokens']} ü™ô\n"
    
    await update.message.reply_text(leaderboard_text, reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:

/get_tokens - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
/my_stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/leaderboard - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å

–î–ª—è –∞–¥–º–∏–Ω–æ–≤:
/announce [—Ç–µ–∫—Å—Ç] - –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö
/set_prize [—Ç–µ–∫—Å—Ç] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é
    """
    await update.message.reply_text(help_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π - –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –∑–∞–¥–∞–Ω–∏—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name
    
    if user_id not in user_data:
        user_data[user_id] = {"tokens": 0, "username": username}
    
    message = update.message
    earned_tokens = 0
    
    # –ó–∞–¥–∞–Ω–∏–µ 1: –°–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
    if len(message.text or "") > 50:
        earned_tokens += 1
    
    # –ó–∞–¥–∞–Ω–∏–µ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
    if message.photo:
        earned_tokens += 1
    
    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    if earned_tokens > 0:
        user_data[user_id]["tokens"] += earned_tokens
        await message.reply_text(
            f"+{earned_tokens} —Ç–æ–∫–µ–Ω(–∞) ü™ô –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!\n"
            f"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è: {user_data[user_id]['tokens']} —Ç–æ–∫–µ–Ω–æ–≤",
            reply_markup=reply_markup
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_rank(user_id):
    if not user_data:
        return "–ù/–î"
    
    sorted_users = sorted(user_data.items(), key=lambda x: x[1]["tokens"], reverse=True)
    user_ids = [uid for uid, _ in sorted_users]
    
    if user_id in user_ids:
        return user_ids.index(user_id) + 1
    return "–ù/–î"

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
async def weekly_winner(context: CallbackContext):
    global group_week_winner
    
    if not user_data:
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    winner_id = max(user_data.items(), key=lambda x: x[1]["tokens"])[0]
    winner_data = user_data[winner_id]
    group_week_winner = winner_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
    winner_text = (
        f"üèÜ –ù–µ–¥–µ–ª—å–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å!\n"
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {winner_data['username']} —Å {winner_data['tokens']} —Ç–æ–∫–µ–Ω–∞–º–∏!\n"
        f"–ê–¥–º–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –¥–ª—è –≤—Ä—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞!"
    )
    
    await context.bot.send_message(chat_id=context.job.chat_id, text=winner_text)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –Ω–∞ –Ω–æ–≤—É—é –Ω–µ–¥–µ–ª—é
    for user_id in user_data:
        user_data[user_id]["tokens"] = 0

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–∑
async def set_prize(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!")
        return
    
    prize_text = " ".join(context.args)
    if not prize_text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_prize [–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞]")
        return
    
    global current_prize
    current_prize = prize_text
    await update.message.reply_text(f"–ü—Ä–∏–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {prize_text}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ - –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
async def announce(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞!")
        return
    
    announcement = " ".join(context.args)
    if not announcement:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /announce [—Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è]")
        return
    
    await update.message.reply_text(f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ: {announcement}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("get_tokens", show_tasks))
    application.add_handler(CommandHandler("my_stats", show_stats))
    application.add_handler(CommandHandler("leaderboard", show_leaderboard))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("set_prize", set_prize))
    application.add_handler(CommandHandler("announce", announce))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
